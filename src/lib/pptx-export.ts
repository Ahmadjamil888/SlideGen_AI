export const exportToPPTX = async (slideData: any) => {
  try {
    // For now, create a comprehensive text export with formatting
    // This avoids the Node.js compatibility issues with pptxgenjs
    
    const textContent = `${slideData.title || 'Generated Presentation'}
${'='.repeat(50)}

Generated by SlideGen AI
Theme: ${slideData.theme?.primaryColor || 'Default'}
Total Slides: ${slideData.slides?.length || 0}

${'='.repeat(50)}

${slideData.slides.map((slide: any, index: number) => {
  let slideText = `SLIDE ${index + 1}: ${slide.title}\n${'-'.repeat(30)}\n`;
  
  if (slide.subtitle) {
    slideText += `Subtitle: ${slide.subtitle}\n\n`;
  }
  
  if (slide.content && Array.isArray(slide.content)) {
    slideText += 'Content:\n';
    slide.content.forEach((item: string) => {
      slideText += `• ${item}\n`;
    });
    slideText += '\n';
  } else if (slide.content && typeof slide.content === 'string') {
    slideText += `Content: ${slide.content}\n\n`;
  }
  
  if (slide.speakerNotes) {
    slideText += `Speaker Notes:\n${slide.speakerNotes}\n\n`;
  }
  
  slideText += `Animation: ${slide.animation || 'None'}\n`;
  slideText += `Type: ${slide.type || 'content'}\n`;
  
  return slideText;
}).join('\n' + '='.repeat(50) + '\n\n')}

${'='.repeat(50)}
End of Presentation

Instructions for PowerPoint:
1. Copy each slide content into a new PowerPoint slide
2. Apply the theme colors: ${slideData.theme?.primaryColor || '#0891b2'}
3. Use the speaker notes for presentation guidance
4. Add animations as specified for each slide

Generated on: ${new Date().toLocaleString()}
`;

    // Create and download the file
    const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${slideData.title?.replace(/[^a-z0-9]/gi, '_') || 'presentation'}_slides.txt`;
    a.style.display = 'none';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    return true;
    
  } catch (error) {
    console.error('Error exporting slides:', error);
    throw new Error('Failed to export slides. Please try again.');
  }
};

// Alternative: Export as HTML for better formatting
export const exportToHTML = async (slideData: any) => {
  try {
    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${slideData.title || 'Generated Presentation'}</title>
    <style>
        body {
            font-family: ${slideData.theme?.fontFamily || 'Inter, sans-serif'};
            background-color: ${slideData.theme?.backgroundColor || '#ffffff'};
            color: ${slideData.theme?.textColor || '#1e293b'};
            margin: 0;
            padding: 20px;
        }
        .slide {
            page-break-after: always;
            min-height: 90vh;
            padding: 40px;
            border: 1px solid #e5e7eb;
            margin-bottom: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .slide-title {
            color: ${slideData.theme?.primaryColor || '#0891b2'};
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 1rem;
        }
        .slide-subtitle {
            font-size: 1.5rem;
            margin-bottom: 2rem;
            opacity: 0.8;
        }
        .slide-content {
            font-size: 1.25rem;
            line-height: 1.6;
        }
        .slide-content ul {
            list-style: none;
            padding: 0;
        }
        .slide-content li {
            margin: 1rem 0;
            padding-left: 2rem;
            position: relative;
        }
        .slide-content li:before {
            content: "•";
            color: ${slideData.theme?.secondaryColor || '#0f766e'};
            font-weight: bold;
            position: absolute;
            left: 0;
        }
        .speaker-notes {
            margin-top: 2rem;
            padding: 1rem;
            background-color: #f9fafb;
            border-left: 4px solid ${slideData.theme?.primaryColor || '#0891b2'};
            font-style: italic;
            font-size: 1rem;
        }
        .slide-number {
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 0.875rem;
            opacity: 0.6;
        }
        @media print {
            .slide {
                page-break-after: always;
                margin-bottom: 0;
            }
        }
    </style>
</head>
<body>
    <h1 style="text-align: center; color: ${slideData.theme?.primaryColor || '#0891b2'}; margin-bottom: 2rem;">
        ${slideData.title || 'Generated Presentation'}
    </h1>
    
    ${slideData.slides.map((slide: any, index: number) => `
        <div class="slide">
            <div class="slide-number">Slide ${index + 1} of ${slideData.slides.length}</div>
            
            ${slide.type === 'title' ? `
                <div style="text-align: center; padding-top: 20vh;">
                    <h1 class="slide-title">${slide.title}</h1>
                    ${slide.subtitle ? `<p class="slide-subtitle">${slide.subtitle}</p>` : ''}
                </div>
            ` : `
                <h2 class="slide-title">${slide.title}</h2>
                <div class="slide-content">
                    ${slide.content && Array.isArray(slide.content) ? `
                        <ul>
                            ${slide.content.map((item: string) => `<li>${item}</li>`).join('')}
                        </ul>
                    ` : slide.content ? `<p>${slide.content}</p>` : ''}
                </div>
            `}
            
            ${slide.speakerNotes ? `
                <div class="speaker-notes">
                    <strong>Speaker Notes:</strong> ${slide.speakerNotes}
                </div>
            ` : ''}
        </div>
    `).join('')}
    
    <div style="text-align: center; margin-top: 2rem; padding: 2rem; border-top: 1px solid #e5e7eb;">
        <p>Generated by SlideGen AI on ${new Date().toLocaleString()}</p>
        <p>Print this page or save as PDF for offline use</p>
    </div>
</body>
</html>`;

    const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${slideData.title?.replace(/[^a-z0-9]/gi, '_') || 'presentation'}_slides.html`;
    a.style.display = 'none';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    return true;
    
  } catch (error) {
    console.error('Error exporting to HTML:', error);
    throw new Error('Failed to export as HTML. Please try again.');
  }
};